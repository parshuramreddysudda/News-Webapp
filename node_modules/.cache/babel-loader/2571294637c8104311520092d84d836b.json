{"ast":null,"code":"var _jsxFileName = \"/Users/vishnu/Desktop/react/news-webapp/src/components/weather-rep.components.jsx\";\nimport React from 'react';\nimport './weather-rep.scss';\nimport Weather from \"./weather\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Form from \"./form\";\nconst API_KEY = \"c6495ff8b8839c36a2991986616d8307\"; // wolframwapha AppID=888UUR-X3TPQ8UGYP\n//https://api.ipify.org?format=json\n//curl https://ipapi.co/8.8.8.8/latlong/\n//http://ip-api.com/json/24.48.0.1\n\nclass Weatherrep extends React.Component {\n  constructor() {\n    super();\n\n    this.getWeather = async e => {\n      e.preventDefault();\n      const ip_api_call = await fetch(`https://api.ipify.org?format=json`);\n      const ip_response = await ip_api_call.json();\n      console.log(ip_response);\n      const ip = this.state.ip;\n      const det_api_call = await fetch(`http://ip-api.com/json/${ip}`);\n      const det_response = await det_api_call.json();\n      console.log(det_response);\n      const city = e.target.elements.city.value;\n      const country = e.target.elements.country.value;\n\n      if (city && country) {\n        const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`);\n        const response = await api_call.json();\n        console.log(response);\n        this.setState({\n          city: `${response.name},${response.sys.country}`,\n          lat: response.coord.lat,\n          long: response.coord.lon,\n          celsius: this.calCelsius(response.main.temp),\n          temp_min: this.calCelsius(response.main.temp_min),\n          temp_max: this.calCelsius(response.main.temp_max),\n          description: response.weather[0].description,\n          error: false,\n          ip: ip_response.ip\n        });\n      } else {\n        this.setState({\n          error: true\n        });\n      }\n    };\n\n    this.getIP = async e => {\n      e.preventDefault();\n      const ip_api_call = await fetch(`https://api.ipify.org?format=json`);\n      const ip_response = await ip_api_call.json();\n      console.log(ip_response);\n      this.setState({\n        ip: ip_response.ip\n      });\n    };\n\n    this.state = {\n      lat: undefined,\n      long: undefined,\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: \"\",\n      err: false,\n      ip: undefined\n    };\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n\n  get_WeatherIcon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId <= 232:\n        this.setState({\n          icon: this.weatherIcon.Thunderstorm\n        });\n        break;\n\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({\n          icon: this.weatherIcon.Drizzle\n        });\n        break;\n\n      case rangeId >= 500 && rangeId <= 531:\n        this.setState({\n          icon: this.weatherIcon.Rain\n        });\n        break;\n\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({\n          icon: this.weatherIcon.Snow\n        });\n        break;\n\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({\n          icon: this.weatherIcon.Atmosphere\n        });\n        break;\n\n      case rangeId === 800:\n        this.setState({\n          icon: this.weatherIcon.Clear\n        });\n        break;\n\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({\n          icon: this.weatherIcon.Clouds\n        });\n        break;\n\n      default:\n        this.setState({\n          icon: this.weatherIcon.clouds\n        });\n    }\n  }\n\n  calCelsius(temp) {\n    let cel = Math.floor(temp - 273.15);\n    return cel;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"  Weather App\"), this.getIP, React.createElement(Form, {\n      loadWeather: this.getWeather,\n      error: this.state.error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }), React.createElement(Weather, {\n      city: this.state.city,\n      country: this.state.country,\n      lat: this.state.lat,\n      long: this.state.long,\n      temp_celsius: this.state.celsius,\n      temp_min: this.state.temp_min,\n      temp_max: this.state.temp_max,\n      description: this.state.description,\n      weatherIcon: this.state.icon,\n      ip: this.state.ip,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Weatherrep;","map":{"version":3,"sources":["/Users/vishnu/Desktop/react/news-webapp/src/components/weather-rep.components.jsx"],"names":["React","Weather","Form","API_KEY","Weatherrep","Component","constructor","getWeather","e","preventDefault","ip_api_call","fetch","ip_response","json","console","log","ip","state","det_api_call","det_response","city","target","elements","value","country","api_call","response","setState","name","sys","lat","coord","long","lon","celsius","calCelsius","main","temp","temp_min","temp_max","description","weather","error","getIP","undefined","icon","err","weatherIcon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","get_WeatherIcon","icons","rangeId","clouds","cel","Math","floor","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './weather-rep.scss';\nimport Weather from \"./weather\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Form from \"./form\";\n\nconst API_KEY = \"c6495ff8b8839c36a2991986616d8307\";\n\n// wolframwapha AppID=888UUR-X3TPQ8UGYP\n//https://api.ipify.org?format=json\n//curl https://ipapi.co/8.8.8.8/latlong/\n//http://ip-api.com/json/24.48.0.1\n\nclass Weatherrep extends React.Component {\n  constructor(){\n    super();\n    this.state={\n      lat: undefined,\n      long: undefined,\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: \"\",\n      err: false, \n      ip:undefined,\n    };\n    this.weatherIcon={\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n\n  get_WeatherIcon(icons,rangeId){\n    switch(true){\n      case rangeId >= 200 && rangeId <= 232:\n        this.setState({icon: this.weatherIcon.Thunderstorm});\n        break;\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({icon: this.weatherIcon.Drizzle});\n        break;\n      case rangeId >= 500 && rangeId <= 531:\n        this.setState({icon: this.weatherIcon.Rain});\n        break;\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({icon: this.weatherIcon.Snow});\n        break;\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({icon: this.weatherIcon.Atmosphere});\n        break;\n      case rangeId === 800:\n        this.setState({icon: this.weatherIcon.Clear});\n        break;\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({icon: this.weatherIcon.Clouds});\n        break;\n      default:\n        this.setState({icon: this.weatherIcon.clouds});\n\n    }\n  }\n\n  calCelsius(temp){\n    let cel = Math.floor(temp - 273.15);\n    return cel;\n  }\n\n  getWeather = async(e) => {\n    e.preventDefault();\n    \n    const ip_api_call = await fetch(`https://api.ipify.org?format=json`);\n    const ip_response= await ip_api_call.json();\n    console.log(ip_response);\n    const ip= this.state.ip;\n      \n    const det_api_call = await fetch(`http://ip-api.com/json/${ip}`);\n    const det_response= await det_api_call.json();\n    console.log(det_response);\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value; \n    if( city && country ) {\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`);\n    const response= await api_call.json();\n    console.log(response);\n\n    this.setState({\n      city: `${response.name},${response.sys.country}`,\n      lat: response.coord.lat,\n      long: response.coord.lon,\n      celsius: this.calCelsius(response.main.temp),\n      temp_min: this.calCelsius(response.main.temp_min),\n      temp_max: this.calCelsius(response.main.temp_max),\n      description: response.weather[0].description,\n      error: false,\n      ip: ip_response.ip\n    });\n      \n  }\n    else{\n      this.setState({error: true});\n    }\n\n  };\n\n  getIP = async(e) => {\n    e.preventDefault();\n    const ip_api_call = await fetch(`https://api.ipify.org?format=json`);\n    const ip_response= await ip_api_call.json();\n    console.log(ip_response);\n    this.setState({\n        ip: ip_response.ip\n      });\n  }\n  render(){\n    return(\n      <div className=\"App\">\n        <h1 className=\"App-header\">  Weather App</h1>\n        {this.getIP}\n        <Form loadWeather={this.getWeather} error={this.state.error}/>\n        <Weather \n        city={this.state.city} \n        country={this.state.country}\n        lat={this.state.lat} \n        long={this.state.long}\n        temp_celsius={this.state.celsius}\n        temp_min={this.state.temp_min}\n        temp_max={this.state.temp_max}\n        description={this.state.description}\n        weatherIcon={this.state.icon}\n        ip={this.state.ip}\n        />  \n      </div>\n    );\n  }\n}\n\n\nexport default Weatherrep;\n"]},"metadata":{},"sourceType":"module"}